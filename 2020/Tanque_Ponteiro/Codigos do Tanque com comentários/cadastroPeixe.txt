#include <stdio.h>
#include <cstring>
#include <locale>
#include <iostream>
#include <conio.h>
using namespace std;

// INCLUIR TANQUE 
void incluirTanque(int *posicaoT){
	Tanque t;
	cout << " Incluir Tanque " << endl;
	
	string nome1;
	cout << " Entre com o modelo do tanque: ";
	cin.ignore();
	getline(cin, nome1);
	strcpy(t.modelo, nome1.c_str());
	
	cout << "\n Qual a finalidade do tanque?: ";
	getline(cin, nome1);
	strcpy(t.finalidade,nome1.c_str());
	
	cout << "\n Entre com a populacao total no momento: ";
	cin>> t.populacao_total;
	
	vetorTanque[*posicaoT] = t;
	*posicaoT = (*posicaoT) + 1;
}

// LISTAR TANQUE
void listarTanque(int idTanque, int *posicaoT){
	if(idTanque == *posicaoT){
		return;
	}
		cout << " == Listagem do tanque cadastrado " << endl;
		cout << " Codigo: " << idTanque << endl;
		cout << " Modelo do Tanque: " << vetorTanque[idTanque].modelo << endl;
		cout << " Finalidade: " << vetorTanque[idTanque].finalidade << endl;
		cout << " Populacao total: " << vetorTanque[idTanque].populacao_total << " peixe(s)" << endl << endl;
		listarTanque(idTanque + 1, posicaoT);
}

// INCLUIR PEIXE
void incluirPeixe(int *posicaoP){
	Peixe p;
	
	cout << " == Incluir Tipo do Peixe " << endl;
	string nome1;
	
	cout << " Entre com o nome do peixe: ";
	cin.ignore();
	getline(cin, nome1);
	strcpy(p.peixe, nome1.c_str());
	
	cout << " Entre com a descricao desejada: ";
	getline(cin, nome1);
	strcpy(p.descricao, nome1.c_str());
	
	vetorPeixe[*posicaoP] = p;
	*posicaoP = (*posicaoP) + 1;
}

//LISTAR PEIXE
void listarPeixe(int idPeixe, int *posicaoP){
	if(idPeixe == *posicaoP){
		return;
	}
		cout << " == Listagem do peixe cadastrado " << endl;
		cout << " Codigo " << idPeixe << endl;
		cout << " Peixe: " << vetorPeixe[idPeixe].peixe << endl;
		cout << " Descricao: " << vetorPeixe[idPeixe].descricao << endl;
		listarPeixe(idPeixe + 1,posicaoP);
}


// INCLUIR CARDUME
void incluirCardume(int *posicaoC, int *posicaoT){
	int i, qtdePeixe, NumTanque;
	bool existe = false;

	cout << " == Incluir Cardume no Tanque" << endl;
	Cardume c;
	string nome1;
	
	cout << " Entre com o nome do peixe a ser inserido: ";
	cin.ignore();
	getline(cin, nome1);
	strcpy(c.peixe, nome1.c_str());
	
	cout << " Qual o nome do tanque?: ";
	getline(cin, nome1);
	strcpy(c.tanque, nome1.c_str()); // apenas para aparecer o nome do tanque no listar cardume
	
	cout << " Digite o codigo do tanque para adicionar o cardume: ";
	cin >> NumTanque;
	
	// se o usuario digita 1, ele vira 0, pois 1 - 1 = 0 e isso so vale no codigo, pro usuario nao importa
	NumTanque = NumTanque - 1;
	
	for (i = 0; i < *posicaoT; i++){
		if (NumTanque == i){ //se o numero do tanque Ã© igual ao numero do vetor que esta cadastrado
			existe = true; // o tanque existe
			break;
		}
		else {
			existe = false; // se nao, ele nao existe
		}
	}
	
	if (existe){ // se o tanque existe, ele continua com o restante do codigo
		cout << " Entre com a quantidade de peixes a ser inserido: ";
		cin >> qtdePeixe;
		c.qtdePeixe = qtdePeixe;
	
		vetorTanque[NumTanque].populacao_total = vetorTanque[NumTanque].populacao_total + c.qtdePeixe;
	}
	else {
		cout << "Numero do Tanque nao localizado!" << endl;
		return;
	}
	
	
	vetorCardume[*posicaoC] = c;
	*posicaoC = (*posicaoC) + 1;

}

// LISTAR CARDUME
void listarCardume(int idCardume, int *posicaoC){
	if(idCardume == *posicaoC){
		return;
	}
	cout << " == Listar Cardume" << endl;
	cout << " Peixe inserido: " << vetorCardume[idCardume].peixe << endl;
	cout << " Tanque inserido: " << vetorCardume[idCardume].tanque << endl;
	cout << " Quantidade inserida: " << vetorCardume[idCardume].qtdePeixe << endl;
	listarCardume(idCardume + 1, posicaoC);
}


// Atualizando o codigo com o da aula do dia 27/05 - EXERCICIO DE ARQUIVOS

// TANQUE
void gravarTanque(int *posicaoT) {
    FILE *arquivo;
    arquivo = fopen("TANQUE.TXT", "w+");
    if (arquivo == NULL){
        printf("Problemas na criacao do arquivo\n");
        return;
    }
    for(int i = 0; i < *posicaoT; i++) {
        fprintf(arquivo, "\r\n Tanque: ");
        fprintf(arquivo, vetorTanque[i].modelo );
        fprintf(arquivo, " \r\n ");
        fprintf(arquivo, "\r\n Finalidade: ");
        fprintf(arquivo, vetorTanque[i].finalidade );
        fprintf(arquivo, " \r\n ");
        fprintf(arquivo, "\r\n Populacao Total: ");
        char str[12];
        sprintf(str, "%d", vetorTanque[i].populacao_total );
        fprintf(arquivo, str);
        fprintf(arquivo, " \r\n ");
        fprintf(arquivo, "\r\n");
    }
    fclose(arquivo);
    system("cls");
    cout << "\n Arquivo TANQUE.TXT gerado com sucesso!"<< endl;
    
}

// PEIXE
void gravarPeixe(int *posicaoP){
    FILE *arquivo;
    arquivo = fopen("PEIXE.TXT", "w+");
    if (arquivo == NULL){
        printf("Problemas na criacao do arquivo\n");
        return;
    }
    for(int i = 0; i < *posicaoP; i++) {
        fprintf(arquivo, "\r\n Peixe: ");
        fprintf(arquivo, vetorPeixe[i].peixe );
        fprintf(arquivo, " \r\n ");
        fprintf(arquivo, "\r\n Descricao: ");
        fprintf(arquivo, vetorPeixe[i].descricao );
        fprintf(arquivo, " \r\n ");
        fprintf(arquivo, "\r\n");
    }
    fclose(arquivo);
    system("cls");
    cout << "\n Arquivo PEIXE.TXT gerado com sucesso!"<< endl;
}


// CARDUME
void gravarCardume(int *posicaoC) {
    FILE *arquivo;
    arquivo = fopen("CARDUME.TXT", "w+");
    if (arquivo == NULL){
        printf("Problemas na criacao do arquivo\n");
        return;
    }
    for(int i = 0; i < *posicaoC; i++) {
        fprintf(arquivo, "\r\n Peixe: ");
        fprintf(arquivo, vetorCardume[i].peixe );
        fprintf(arquivo, " \r\n ");
        fprintf(arquivo, "\r\n Tanque: ");
        fprintf(arquivo, vetorCardume[i].tanque );
        fprintf(arquivo, " \r\n ");
        fprintf(arquivo, "\r\n Quantidade de Peixes: ");
        char str[12];
        sprintf(str, "%d", vetorCardume[i].qtdePeixe );
        fprintf(arquivo, str);
        fprintf(arquivo, "\r\n");
        fprintf(arquivo, "\r\n");
    }
    fclose(arquivo);
    system("cls");
    cout << "\n Arquivo CARDUME.TXT gerado com sucesso!"<< endl;
    
}



// GRAVANDO EM BINARIO
void gravarDadosBinarios(int *posicaoT, int *posicaoP, int *posicaoC) {
    FILE *arquivoTanque;
    arquivoTanque = fopen("arqTanque.bin", "wb+");
    if (arquivoTanque == NULL){
        printf("Problemas na criacao do arquivo BIN\n");
        return;
    }
    fwrite(&vetorTanque, sizeof(Tanque), *posicaoT, arquivoTanque);
    fclose(arquivoTanque);
     
    //////////////////////////////
     FILE *arquivoPeixe;
    arquivoPeixe = fopen("aqrPeixe.bin", "wb+");
    if (arquivoPeixe == NULL){
        printf("Problemas na criacao do arquivo BIN \n");
        return;
    }
    fwrite(&vetorPeixe, sizeof(Peixe), *posicaoP, arquivoPeixe); // grava todo o vetor 
    fclose(arquivoPeixe);
    
    //////////////////////////////////////
    FILE *arquivoCardume;
    arquivoCardume = fopen("arqCardume.bin", "wb+");
    if (arquivoCardume == NULL){
        printf("Problemas na criacao do arquivo BIN\n");
        return;
    }
    fwrite(&vetorCardume, sizeof(Cardume), *posicaoC, arquivoCardume); // grava todo o vetor 
    fclose(arquivoCardume);

    
    cout << "\n Arquivos binarios gerados com sucesso" << endl;
    return;
}


// CARREGAR ARQUIVOS
void carregarArquivos(int *posicaoT, int *posicaoP, int *posicaoC){
	//TANQUE
    FILE *arquivoTanque;
    *posicaoT = 0;
    arquivoTanque = fopen("arqTanque.bin", "rb+");
    
    if(arquivoTanque){ 
        fread(&vetorTanque, sizeof(Tanque), TAMANHO, arquivoTanque);
        for(int i = 0; i < TAMANHO; i++) {
            if (vetorTanque[i].modelo[0] != NULL){
                (*posicaoT)=*posicaoT +1;
            }
        }
        fclose(arquivoTanque);
    }
    
    
    //PEIXE
    FILE *arquivoPeixe;
    *posicaoP = 0;
    arquivoPeixe = fopen("arqPeixe.bin", "rb+");
    
    if(arquivoPeixe){ 
        fread(&vetorPeixe, sizeof(Peixe), TAMANHO, arquivoPeixe);
        for(int i = 0; i < TAMANHO; i++) {
            if (vetorPeixe[i].peixe[0] != NULL){
                (*posicaoP)=*posicaoP +1;
            }
        }
        fclose(arquivoPeixe);
    }
    
    
    //CARDUME
    FILE *arquivoCardume;
    *posicaoC = 0;	
    arquivoCardume = fopen("arqCardume.bin", "rb+");
    
    if(arquivoCardume){ 
        fread(&vetorCardume, sizeof(Cardume), TAMANHO, arquivoCardume);
        for(int i = 0; i < TAMANHO; i++) {
            if (vetorCardume[i].tanque[0] != NULL){
                (*posicaoC)=*posicaoC +1;
            }
        }
        fclose(arquivoCardume);
    }
    
    cout << "\n Arquivos recuperados com sucesso!\n" << endl;
    
}

